{"version":3,"sources":["test/test-01/index.tsx","test/test-02/index.tsx","../../src/components/common/error-message/styles.ts","../../src/components/common/error-message/index.tsx","../../src/components/text-area/index.tsx","test/test-03/index.tsx","App.js","index.js"],"names":["TestComponent01","style","textAlign","fontWeight","TestComponent02","styles","color","ErrorMessageComponent","children","render","name","className","component","TextAreaInput","placeholder","minLength","maxLength","useState","value","isValidValue","errorMessage","inputs","setInputs","handleChange","useCallback","event","console","useEffect","validateInput","alphabet","handleBlur","React","type","onChange","onBlur","TestComponent03","App","ReactDOM","document","getElementById"],"mappings":"8PAgCeA,EA7BmB,WAKhC,OACE,6BACE,wBACEC,MAAO,CACLC,UAAW,SACXC,WAAY,SAHhB,wBCOSC,EAfmB,WAChC,OACE,6BACE,wBACEH,MAAO,CACLC,UAAW,SACXC,WAAY,SAHhB,wB,wCCLOE,EAAS,CACpBC,MAAO,OCIIC,EAA0D,SAAC,G,IACtEC,aACAC,WACAC,SACAC,cACAC,cAEA,OACE,yBAAKX,MAAOI,GACV,uBACEK,KAAMA,EACNF,SAAUA,EACVC,OAAQA,EACRE,UAAWA,EACXC,UAAWA,MAMnBL,8B,ICTaM,EAAyC,SAAC,G,IACrDH,SACAI,gBACAC,cACAC,c,EAE4BC,mBAAqB,CAC/CC,MAD+C,GAE/CC,cAF+C,EAG/CC,aAAc,KAHTC,OAAQC,OAMTC,EAAeC,uBAAY,YAC/BF,EAAU,CACRJ,MAAOO,SADC,MAERN,cAFQ,EAGRC,aAAc,UAGhB,IAAIK,gBACFC,2BARJ,IAYAC,qBAAU,WACRJ,WADFI,IAIA,IAAMC,EAAgB,SAACV,GAMrB,GAAIA,UAAJ,KAAsBA,EAAc,CAElC,MAAO,CACLA,MAFF,GAGEC,cAFK,EAGLC,aAAc,yBAEX,MAZP,qCAYYS,KAAL,GAMIX,QAjBX,kBAkBS,CACLA,MAAOG,EADF,MAELF,cAFK,EAGLC,aAAc,sBAGT,CACLD,cADK,EAELC,aAAc,IAdT,CACLF,MAAOG,EADF,MAELF,cAFK,EAGLC,aAAc,0BAgBdU,EAAaN,uBAAY,W,MACiBI,EAAcP,EAAD,OAAnDH,UAAOC,iBAAcC,iBAC7BE,EAAU,CACRJ,MADQ,EAERC,aAFQ,EAGRC,aAAcA,MAEf,CAACC,EAAD,MAPH,IASA,OADAK,cAEE,6BACEK,uCADF,GAIE,uBACEC,KAAK,WACLlB,YAAaA,EACbI,MAAOG,EAAOH,MACde,SAAUV,EACVW,OAAQJ,EACRf,UAAWA,EACXC,UAAWA,IAEbe,8BAAOV,EAdX,gBC5Dac,EArBmB,WAChC,OACE,6BACE,wBACElC,MAAO,CACLC,UAAW,SACXC,WAAY,SAHhB,wBAQA,kBAAC,EAAD,CACEO,KAAK,cACLI,YAAY,oBACZC,UAAW,EACXC,UAAW,OCLJoB,EAVH,WACV,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJNC,IAAS5B,OAAO,kBAAC,EAAD,MAAS6B,SAASC,eAAe,W","file":"static/js/main.6d6487a9.chunk.js","sourcesContent":["import React from 'react'\r\n// import { FormComponent, TextField, SubmitButton } from 'cplus_common_library'\r\n\r\nconst TestComponent01: React.FC = () => {\r\n  const initialValues = {\r\n    firstName: '',\r\n    lastName: ''\r\n  }\r\n  return (\r\n    <div>\r\n      <h1\r\n        style={{\r\n          textAlign: 'center',\r\n          fontWeight: 'bold'\r\n        }}\r\n      >\r\n        Testing Components\r\n      </h1>\r\n      {/* <FormComponent\r\n        propValues={initialValues}\r\n        onSubmit={(values: any) => {\r\n          window.alert(JSON.stringify(values))\r\n        }}\r\n      >\r\n        <TextField name='firstName' required />\r\n        <TextField name='lastName' required />\r\n        <SubmitButton text='Go' />\r\n      </FormComponent> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent01\r\n","import React from 'react'\r\n\r\nconst TestComponent02: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1\r\n        style={{\r\n          textAlign: 'center',\r\n          fontWeight: 'bold'\r\n        }}\r\n      >\r\n        Testing Components\r\n      </h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent02\r\n","export const styles = {\r\n  color: 'red'\r\n}\r\n","import React from 'react'\r\nimport { ErrorMessage } from 'formik'\r\nimport { styles } from './styles'\r\nimport * as types from './types'\r\n\r\nexport const ErrorMessageComponent: React.FC<types.ErrorMessageType> = ({\r\n  children,\r\n  render,\r\n  name,\r\n  className,\r\n  component\r\n}) => {\r\n  return (\r\n    <div style={styles}>\r\n      <ErrorMessage\r\n        name={name}\r\n        children={children}\r\n        render={render}\r\n        className={className}\r\n        component={component}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nErrorMessageComponent.displayName = 'Error Message'\r\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { Label, Input } from 'reactstrap'\n\nexport type InputTypes = {\n  value: any\n  isValidValue: boolean\n  errorMessage: any\n}\n\nexport type TextAreaProps = {\n  name: any\n  placeholder: any\n  minLength?: number\n  maxLength?: number\n}\n\nexport const TextAreaInput: React.FC<TextAreaProps> = ({\n  name,\n  placeholder,\n  minLength,\n  maxLength\n}) => {\n  const [inputs, setInputs] = useState<InputTypes>({\n    value: '',\n    isValidValue: true,\n    errorMessage: ''\n  })\n\n  const handleChange = useCallback((event: any) => {\n    setInputs({\n      value: event.target.value,\n      isValidValue: false,\n      errorMessage: ''\n    })\n    // var textInput = event.target.value\n    if (event.target.value === undefined) {\n      console.log('undefined')\n    }\n  }, [])\n\n  useEffect(() => {\n    handleChange(event)\n  }, [])\n\n  const validateInput = (value: any) => {\n    const alphabet = /^[a-zA-Z-,]+(\\s{0,1}[a-zA-Z-, ])*$/\n    const en = /^[A-Za-z0-9]*$/\n    // const ja = /^[a-zA-Z0-9]+$/\n    // const ch = /(\\p{Script=Hani})+/gu\n\n    if (value !== null && value === '') {\n      const resetInput = ''\n      return {\n        value: resetInput,\n        isValidValue: false,\n        errorMessage: 'field cannot be empty'\n      }\n    } else if (!alphabet.exec(value)) {\n      return {\n        value: inputs.value,\n        isValidValue: false,\n        errorMessage: 'space only is invalid'\n      }\n    } else if (value.match(en)) {\n      return {\n        value: inputs.value,\n        isValidValue: false,\n        errorMessage: 'Invalid characters'\n      }\n    } else {\n      return {\n        isValidValue: true,\n        errorMessage: ''\n      }\n    }\n  }\n\n  const handleBlur = useCallback(() => {\n    const { value, isValidValue, errorMessage } = validateInput(inputs.value)\n    setInputs({\n      value: value,\n      isValidValue: isValidValue,\n      errorMessage: errorMessage\n    })\n  }, [inputs.value, validateInput])\n  console.log()\n  return (\n    <div>\n      <Label>\n        {name} &nbsp; /{maxLength}\n      </Label>\n      <Input\n        type='textarea'\n        placeholder={placeholder}\n        value={inputs.value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        minLength={minLength}\n        maxLength={maxLength}\n      />\n      <span>{inputs.errorMessage}</span>\n    </div>\n  )\n}\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { TextAreaInput } from 'cplus_common_library'\r\n\r\nconst TestComponent03: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1\r\n        style={{\r\n          textAlign: 'center',\r\n          fontWeight: 'bold'\r\n        }}\r\n      >\r\n        Testing Components 3\r\n      </h1>\r\n      <TextAreaInput \r\n        name=\"Description\" \r\n        placeholder=\"Input Description\" \r\n        minLength={3} /* not required */\r\n        maxLength={10} /* not required */\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent03\r\n","import React from 'react'\r\nimport TestComponent01 from './test/test-01'\r\nimport TestComponent02 from './test/test-02'\r\nimport TestComponent03 from './test/test-03'\r\n\r\nconst App = () => {\r\n  return(\r\n    <>\r\n      <TestComponent01/>\r\n      <TestComponent02/>\r\n      <TestComponent03/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}