{"version":3,"sources":["test/styles.ts","../../src/components/common/error-message/index.tsx","../../src/components/text-field/index.tsx","../../src/components/text-area/index.tsx","../../src/components/select-input/index.tsx","../../src/components/country-code/index.tsx","../../src/components/number-input/index.tsx","../../src/components/email-input/index.tsx","test/test-01/index.tsx","test/test-02/index.tsx","test/test-03/index.tsx","App.js","index.js"],"names":["containerStyles","width","padding","inputStyles","marginBottom","ErrorMessage","error","style","paddingLeft","color","fontSize","TextField","value","required","minLength","maxLength","errors","attrs","innerRef","onChange","useState","setError","targetValue","setTargetValue","toBeValidate","setToBeValidate","handleChange","e","setNoWhiteSpace","validateLength","React","type","className","placeholder","invalid","onBlur","TextAreaInput","name","useEffect","chars","ascii","i","l","c","String","toASCII","val","renderErrorMessage","SelectInput","isRequired","options","isMulti","selectedOptions","setSelectedOptions","useCallback","selected","console","JSON","CountryInput","texts","textVal","setTextVal","errMessage","setErrMessage","checkLength","checkFormat","check","NumberInput","isDecimal","checkValue","num","pos","twoDecimal","num1","parseInt","EmailInput","validateEmail","expression","TestComponent01","textFieldRef","useRef","emailInputRef","title","margin","onClick","log","current","TestComponent02","textInput","empty","min","max","optionFlavours","label","TestComponent03","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0905e9de.chunk.js","sourcesContent":["export const containerStyles = {\r\n  width: '90%',\r\n  padding: '5px'\r\n}\r\n\r\nexport const inputStyles = {\r\n  marginBottom: '20px',\r\n  padding: '5px'\r\n}\r\n","import React from 'react'\r\nimport * as types from './types'\r\n\r\nexport const ErrorMessage: React.FC<types.ErrorType> = ({ error }) => {\r\n  const errorStyles = {\r\n    marginBottom: '5px',\r\n    paddingLeft: '5px',\r\n    color: '#dc3545',\r\n    fontSize: '12px'\r\n  }\r\n\r\n  return <p style={errorStyles}>{error}</p>\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Input, Label } from 'reactstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport * as types from './types'\r\nimport { ErrorMessage } from '../common/error-message'\r\n\r\nexport const TextField: React.FC<types.InputType> = ({\r\n  value,\r\n  required,\r\n  minLength,\r\n  maxLength,\r\n  errors,\r\n  attrs,\r\n  innerRef,\r\n  onChange\r\n}) => {\r\n  const [error, setError] = useState('')\r\n  const [targetValue, setTargetValue] = useState(value)\r\n  const [toBeValidate, setToBeValidate] = useState(targetValue)\r\n\r\n  const handleChange = (e: any) => {\r\n    e.preventDefault()\r\n    const setNoWhiteSpace = e.target.value\r\n    setToBeValidate(setNoWhiteSpace.replace(/(^\\s*)/gi, ''))\r\n    onChange(e)\r\n  }\r\n\r\n  const validateLength = () => {\r\n    if (minLength !== undefined && minLength > toBeValidate.length) {\r\n      setError(`Must be minimum of ${minLength} characters only`)\r\n    } else if (maxLength !== undefined && maxLength < toBeValidate.length) {\r\n      setError(`Must be maximum of ${maxLength} characters only`)\r\n    } else {\r\n      setError('')\r\n    }\r\n  }\r\n\r\n  const validateRequired = () => {\r\n    if (required === true) {\r\n      if (toBeValidate === '') {\r\n        setError(errors?.empty || `Please enter ${attrs?.title}`)\r\n        setTargetValue('')\r\n      } else {\r\n        validateLength()\r\n      }\r\n    } else {\r\n      validateLength()\r\n    }\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    validateRequired()\r\n    if (error !== '') {\r\n      setTargetValue(value)\r\n    } else {\r\n      setToBeValidate(\r\n        toBeValidate\r\n          .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n          .replace(/[ ]{2,}/gi, ' ')\r\n          .replace(/\\n +/, '\\n')\r\n      )\r\n      setTargetValue(toBeValidate)\r\n    }\r\n  }\r\n\r\n  const renderTextCounter = () => (\r\n    <React.Fragment>\r\n      {toBeValidate.length}/{maxLength || 100}\r\n    </React.Fragment>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {required && <span>*</span>}\r\n      <Label>\r\n        {attrs?.title}: {renderTextCounter()}\r\n      </Label>\r\n      <Input\r\n        type='text'\r\n        value={toBeValidate}\r\n        required={required}\r\n        style={attrs?.style}\r\n        className={attrs?.className}\r\n        placeholder={attrs?.placeholder || `Enter ${attrs?.title}`}\r\n        invalid={error !== ''}\r\n        onBlur={handleBlur}\r\n        onChange={(val: any) => handleChange(val)}\r\n        minLength={minLength || 0}\r\n        maxLength={100}\r\n        innerRef={error === '' ? innerRef : null}\r\n      />\r\n      <ErrorMessage error={error} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport { Input, Label } from 'reactstrap'\n\nexport type TextAreaInputProps = {\n  name?: any\n  value?: any\n  required?: boolean\n  minLength?: number | 0\n  maxLength?: number | 2000\n  className: string\n  errors?: {\n    empty?: string\n    invalid?: string\n  }\n  attrs?: {\n    placeholder?: string\n    style?: any\n  }\n  // innerRef: any\n}\n\nexport const renderErrorMessage = (error: string) => {\n  if (error !== '')\n    return (\n      <p\n        style={{\n          color: 'red'\n        }}\n      >\n        {error}\n      </p>\n    )\n  return ''\n}\n\nexport const TextAreaInput: React.FC<TextAreaInputProps> = ({\n  name,\n  value,\n  required,\n  minLength,\n  maxLength,\n  className,\n  errors,\n  attrs\n  // innerRef\n}) => {\n  const [error, setError] = useState('')\n  useEffect(() => {}, [error])\n  const [targetValue, setTargetValue] = useState(value)\n\n  const handleChange = (val: any) => {\n    setTargetValue(val.target.value)\n  }\n\n  const handleBlur = () => {\n    if (required === true) {\n      if (targetValue === '') {\n        setError(errors?.empty || 'Please fill out this field')\n        setTargetValue(value)\n      } else {\n        if (minLength !== undefined && minLength > targetValue.length) {\n          setError(`Must be minimum of ${minLength} characters only`)\n        } else if (maxLength !== undefined && maxLength < targetValue.length) {\n          setError(`Must be maximum of ${maxLength} characters only`)\n        } else {\n          setError('')\n        }\n      }\n    } else {\n      setError('')\n    }\n    // function to convert full-width to half-width\n    const toASCII = (chars: any) => {\n      var ascii = ''\n      for (var i = 0, l = chars.length; i < l; i++) {\n        var c = chars[i].charCodeAt(0)\n\n        // make sure we only convert half-full width char\n        if (c >= 0xff00 && c <= 0xffef) {\n          c = 0xff & (c + 0x20)\n        }\n\n        ascii += String.fromCharCode(c)\n      }\n\n      return ascii\n    }\n    setTargetValue(\n      toASCII(\n        targetValue\n          .replace(/(^\\s*)|(\\s*$)/gi, '') // removes leading and trailing spaces\n          .replace(/[ ]{2,}/gi, ' ') // replaces multiple spaces with one space\n          .replace(/\\n +/, '\\n') // Removes spaces after newlines\n      )\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <Label>\n        {name} &nbsp; {targetValue.length}/{maxLength}\n      </Label>\n      <Input\n        type='textarea'\n        value={targetValue}\n        required={required}\n        style={attrs?.style}\n        className={className}\n        placeholder={attrs?.placeholder}\n        invalid={error !== ''}\n        onBlur={handleBlur}\n        onChange={(val: any) => handleChange(val)}\n        // innerRef={innerRef}\n      />\n      {renderErrorMessage(error)}\n    </React.Fragment>\n  )\n}\n","import React, { useState, useEffect, useCallback } from 'react'\n\nimport Select from 'react-select'\n\nexport type SelectInputProps = {\n  isRequired?: boolean\n  isMulti?: boolean\n  options: any\n  value?: any\n  errors?: {\n    empty?: string\n    invalid?: string\n  }\n}\n\nexport const renderErrorMessage = (error: string) => {\n  if (error !== '')\n    return (\n      <p\n        style={{\n          color: 'red'\n        }}\n      >\n        {error}\n      </p>\n    )\n  return ''\n}\n\nexport const SelectInput: React.FC<SelectInputProps> = ({\n  isRequired,\n  options,\n  value,\n  errors,\n  isMulti\n}) => {\n  const [selectedOptions, setSelectedOptions] = useState(value)\n  const [error, setError] = useState('')\n  useEffect(() => {}, [error])\n\n  const handleChange = useCallback((selected: any) => {\n    setSelectedOptions([selected.value])\n    console.log([selected.value])\n  }, [])\n\n  const handleBlur = () => {\n    if (isRequired === true) {\n      if (selectedOptions === '') {\n        console.log('true')\n        setError(errors?.empty || 'Please fill out this field')\n        setSelectedOptions(value)\n      } else {\n        console.log('false')\n      }\n    } else {\n      setError('')\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Select\n        isMulti={isMulti}\n        isRequired={isRequired}\n        options={options}\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n      {JSON.stringify(renderErrorMessage(error))}\n      {selectedOptions}\n    </React.Fragment>\n  )\n}\n","import React, { useState } from 'react'\r\nimport * as types from './types'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Label, Input } from 'reactstrap'\r\n\r\nexport const CountryInput: React.FC<types.InputType> = ({\r\n  isRequired,\r\n  attrs,\r\n  texts,\r\n  value,\r\n  innerRef,\r\n  className\r\n}) => {\r\n  const [textVal, setTextVal] = useState(value)\r\n\r\n  const [errMessage, setErrMessage] = useState('')\r\n\r\n  const onChange = (value: any) => {\r\n    const check = value.replace(/[^a-zA-Z0-9０-９Ａ-ｚ]/g, '')\r\n    checkLength(check)\r\n    checkFormat(check)\r\n    setTextVal(check.toUpperCase())\r\n  }\r\n\r\n  const checkLength = (val: any) => {\r\n    if (val.length == 1) {\r\n      setErrMessage(texts.invalid)\r\n    } else if (val.length === 0) {\r\n      setErrMessage(texts.empty)\r\n    } else {\r\n      setErrMessage('')\r\n    }\r\n  }\r\n\r\n  const checkFormat = (val: any) => {\r\n    const numberExp = /^[0-9]*$/\r\n    const numberFullExp = /^[０-９]*$/\r\n    const alphaExp = /^[A-Za-z]+$/\r\n    const alphaFullExp = /^[Ａ-ｚ]+$/\r\n    if (\r\n      !(\r\n        val.match(numberExp) ||\r\n        val.match(alphaExp) ||\r\n        val.match(numberFullExp) ||\r\n        val.match(alphaFullExp)\r\n      )\r\n    ) {\r\n      setErrMessage('Invalid country code format.')\r\n    }\r\n  }\r\n\r\n  const toASCII = (chars: any) => {\r\n    var ascii = ''\r\n    for (var i = 0, l = chars.length; i < l; i++) {\r\n      var c = chars[i].charCodeAt(0)\r\n      if (c >= 0xff00 && c <= 0xffef) {\r\n        c = 0xff & (c + 0x20)\r\n      }\r\n      ascii += String.fromCharCode(c)\r\n    }\r\n    setTextVal(ascii)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Label>\r\n        {attrs.title} <span className='text-danger'>*</span>\r\n      </Label>\r\n      <Input\r\n        type='text'\r\n        value={textVal}\r\n        required={isRequired}\r\n        name={attrs.name}\r\n        placeholder={attrs.placeholder}\r\n        style={attrs.style}\r\n        minLength={2}\r\n        maxLength={3}\r\n        onChange={(e: any) => onChange(e.target.value)}\r\n        onBlur={() => toASCII(textVal)}\r\n        invalid={errMessage !== ''}\r\n        innerRef={innerRef}\r\n        className={className}\r\n      />\r\n      <p className='text-danger'>{errMessage}</p>\r\n      <p className='text-muted'>ex: JP or JPN or 392</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport * as types from './types'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Label, Input } from 'reactstrap'\r\n\r\nexport const NumberInput: React.FC<types.InputType> = ({\r\n  isRequired,\r\n  isDecimal,\r\n  attrs,\r\n  texts\r\n}) => {\r\n  const [textVal, setTextVal] = useState('')\r\n\r\n  const [errMessage, setErrMessage] = useState('')\r\n\r\n  const onChange = (value: any) => {\r\n    checkValue(value)\r\n    const num = value.target.value\r\n    if (isDecimal) {\r\n      const check = num.replace(/[^0-9０-９\\..]/g, '')\r\n      checkValue(check)\r\n      if (num.charAt(0) === '.') {\r\n        setTextVal(num.slice(1))\r\n      } else {\r\n        setTextVal(check)\r\n      }\r\n      const pos = num.indexOf('.') + 1\r\n      if (pos > 1) {\r\n        const twoDecimal = num.indexOf('.') + 3\r\n        const num1 = num.substr(0, pos) + num.slice(pos).replace('.', '')\r\n        setTextVal(num1.substr(0, twoDecimal))\r\n      }\r\n    } else {\r\n      const check = num.replace(/[^0-9０-９]/g, '')\r\n      checkValue(check)\r\n      setTextVal(check)\r\n    }\r\n  }\r\n\r\n  const checkValue = (num: any) => {\r\n    if (num.length !== 0) {\r\n      setErrMessage('')\r\n      if (num > attrs.max || num < attrs.min) {\r\n        setErrMessage(texts.invalid)\r\n      }\r\n    } else {\r\n      setErrMessage(texts.empty)\r\n    }\r\n  }\r\n\r\n  const toASCII = (chars: any) => {\r\n    var ascii = ''\r\n    for (var i = 0, l = chars.length; i < l; i++) {\r\n      var c = chars[i].charCodeAt(0)\r\n      if (c >= 0xff00 && c <= 0xffef) {\r\n        c = 0xff & (c + 0x20)\r\n      }\r\n      ascii += String.fromCharCode(c)\r\n    }\r\n    const num = parseInt(ascii)\r\n    if (num > attrs.max || num < attrs.min) {\r\n      setTextVal('')\r\n      setErrMessage(texts.invalid)\r\n    } else {\r\n      setTextVal(ascii)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Label>\r\n        {attrs.title} <span className='text-danger'>*</span>\r\n      </Label>\r\n      <Input\r\n        type='text'\r\n        value={textVal}\r\n        required={isRequired}\r\n        name={attrs.name}\r\n        placeholder={attrs.placeholder}\r\n        style={attrs.style}\r\n        onChange={(value: any) => onChange(value)}\r\n        onBlur={() => toASCII(textVal)}\r\n        invalid={errMessage !== ''}\r\n      />\r\n      <p className='text-danger'>{errMessage}</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","/* eslint-disable no-useless-escape */\nimport React, { useState } from 'react'\nimport { Input, Label } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as types from './types'\nimport { ErrorMessage } from '../common/error-message'\n\nexport const EmailInput: React.FC<types.EmailType> = ({\n  value,\n  required,\n  minLength,\n  maxLength,\n  attrs,\n  errors,\n  innerRef,\n  onChange\n}) => {\n  const [error, setError] = useState('')\n  const [targetValue, setTargetValue] = useState(value)\n  const [toBeValidate, setToBeValidate] = useState(targetValue)\n\n  const renderTextCounter = () => (\n    <React.Fragment>\n      {toBeValidate.length}/{maxLength || 320}\n    </React.Fragment>\n  )\n\n  const validateLength = () => {\n    if (minLength !== undefined && minLength > toBeValidate.length) {\n      setError(`Must be minimum of ${minLength} characters only`)\n    } else if (maxLength !== undefined && maxLength < toBeValidate.length) {\n      setError(`Must be maximum of ${maxLength} characters only`)\n    } else {\n      setError('')\n    }\n  }\n\n  const validateRequired = () => {\n    if (required === true) {\n      if (toBeValidate === '') {\n        setError(errors?.empty || `Please enter ${attrs?.title}`)\n        setTargetValue('')\n      } else {\n        validateLength()\n        validateEmail()\n      }\n    } else {\n      validateLength()\n      validateEmail()\n    }\n  }\n\n  const validateEmail = () => {\n    // eslint-disable-next-line no-control-regex\n    const expression = /(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i\n    const isValid = expression.test(String(toBeValidate).toLowerCase())\n    if (!isValid) {\n      setError(`${errors?.invalid || 'Invalid format'}`)\n      setTargetValue(value)\n    } else {\n      setError('')\n    }\n  }\n\n  // const validate = () => {\n  //   const expression = /(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i\n  //   const isValid = expression.test(String(targetValue).toLowerCase())\n  //   if (required === true) {\n  //     if (targetValue === '') {\n  //       setError(errors?.empty || `Please enter ${attrs?.title}`)\n  //       setTargetValue(value)\n  //     } else {\n  //       if (minLength !== undefined && minLength > targetValue.length) {\n  //         setError(`Must be minimum of ${minLength} characters only`)\n  //         setTargetValue(value)\n  //       } else if (maxLength !== undefined && maxLength < targetValue.length) {\n  //         setError(`Must be maximum of ${maxLength} characters only`)\n  //         setTargetValue(value)\n  //       } else if (!isValid) {\n  //         setError(`${errors?.invalid || 'Invalid format'}`)\n  //         setTargetValue(value)\n  //       } else {\n  //         setError('')\n  //       }\n  //     }\n  //   } else {\n  //     setError('')\n  //   }\n  // }\n\n  const toASCII = (chars: any) => {\n    var ascii = ''\n    for (var i = 0, l = chars.length; i < l; i++) {\n      var c = chars[i].charCodeAt(0)\n      if (c >= 0xff00 && c <= 0xffef) {\n        c = 0xff & (c + 0x20)\n      }\n      ascii += String.fromCharCode(c)\n    }\n    return ascii\n  }\n\n  const handleBlur = () => {\n    toBeValidate\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\n      .replace(/[ ]{2,}/gi, ' ')\n      .replace(/\\n +/, '\\n')\n    targetValue\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\n      .replace(/[ ]{2,}/gi, ' ')\n      .replace(/\\n +/, '\\n')\n\n    validateRequired()\n    if (error !== '') {\n      setTargetValue(toASCII(value))\n      setToBeValidate(toASCII(toBeValidate))\n    } else {\n      setToBeValidate(toASCII(toBeValidate))\n      setTargetValue(toASCII(targetValue))\n    }\n    // validateRequired()\n  }\n\n  const handleChange = (e: any) => {\n    e.preventDefault()\n    const setNoWhiteSpace = e.target.value\n    setToBeValidate(setNoWhiteSpace.replace(/(^\\s*)/gi, ''))\n    onChange(e)\n  }\n\n  return (\n    <React.Fragment>\n      {required && <span>*</span>}\n      <Label>\n        {attrs?.title}: {renderTextCounter()}\n      </Label>\n      <Input\n        type='text'\n        value={toBeValidate}\n        required={required}\n        style={attrs?.style}\n        className={attrs?.className}\n        placeholder={attrs?.placeholder || `Enter ${attrs?.title}`}\n        invalid={error !== ''}\n        onBlur={handleBlur}\n        onChange={(val: any) => handleChange(val)}\n        minLength={minLength || 5}\n        maxLength={320}\n        innerRef={innerRef}\n      />\n      <ErrorMessage error={error} />\n    </React.Fragment>\n  )\n}\n","import React, { useRef } from 'react'\r\nimport { containerStyles, inputStyles } from '../styles'\r\nimport { TextField, EmailInput } from 'cplus_common_library'\r\n\r\nconst TestComponent01: React.FC = () => {\r\n  const textFieldRef = useRef<any>(null)\r\n  const emailInputRef = useRef(null)\r\n\r\n  return (\r\n    <div style={containerStyles}>\r\n      <div style={inputStyles}>\r\n        <TextField\r\n          value='Sample Value'\r\n          minLength={10}\r\n          // required={true}\r\n          innerRef={textFieldRef}\r\n          onChange={() => {}}\r\n          attrs={{\r\n            title: 'Project Name',\r\n            placeholder: 'Enter your project name',\r\n            className: 'nothing',\r\n            style: {\r\n              width: '300px',\r\n              margin: '0'\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={() => console.log(textFieldRef.current)}>\r\n          Check Value\r\n        </button>\r\n      </div>\r\n      <div style={inputStyles}>\r\n        <EmailInput\r\n          value=''\r\n          onChange={() => {}}\r\n          attrs={{\r\n            placeholder: 'Enter your email',\r\n            title: 'Email',\r\n            style: {\r\n              width: '300px',\r\n              margin: '0'\r\n            }\r\n          }}\r\n          required\r\n          minLength={4}\r\n          maxLength={64}\r\n          innerRef={emailInputRef}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent01\r\n","import React, { useRef } from 'react'\r\nimport { containerStyles } from '../styles'\r\nimport { CountryInput, NumberInput } from 'cplus_common_library'\r\n\r\nconst TestComponent02: React.FC = () => {\r\n  const textInput = useRef(null)\r\n  return (\r\n    <div style={containerStyles}>\r\n      <CountryInput\r\n        isRequired={true}\r\n        value=''\r\n        texts={{\r\n          empty: 'Please fill the required field',\r\n          invalid: 'Invalid country code format.'\r\n        }}\r\n        attrs={{\r\n          name: 'inputForm',\r\n          title: 'Input Title',\r\n          placeholder: 'Enter a Country code',\r\n          style: { width: '50%' }\r\n        }}\r\n        className='form-control'\r\n        innerRef={textInput}\r\n      />\r\n      <NumberInput\r\n        isRequired={true}\r\n        isDecimal={false}\r\n        texts={{\r\n          empty: 'Please fill the required field',\r\n          invalid: 'Format incorrect'\r\n        }}\r\n        attrs={{\r\n          name: 'number01',\r\n          title: 'Input Number',\r\n          placeholder: 'Enter a text',\r\n          min: 5,\r\n          max: 10,\r\n          style: { width: '50%' }\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent02\r\n","import React from 'react'\r\nimport { containerStyles } from '../styles'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport { TextAreaInput, SelectInput } from 'cplus_common_library'\r\n\r\nexport const optionFlavours = [\r\n  { value: \"chocolate\", label: \"Chocolate\" },\r\n  { value: \"strawberry\", label: \"Strawberry\" },\r\n  { value: \"vanilla\", label: \"Vanilla\" }\r\n];\r\n\r\nconst TestComponent03: React.FC = () => {\r\n  // const textAreaRef= useRef(null)\r\n\r\n  return (\r\n    <div style={containerStyles}>\r\n      <TextAreaInput\r\n        value=''\r\n        name='Description'\r\n        required={true}\r\n        maxLength={20}\r\n        errors={{\r\n          empty: 'Please fill out this field',\r\n          invalid: 'Format incorrect'\r\n        }}\r\n        className='nothing'\r\n        attrs={{\r\n          placeholder: 'Enter description'\r\n        }}\r\n        // innerRef={textAreaRef}\r\n      />\r\n      <SelectInput options={optionFlavours} isRequired={true} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent03\r\n","import React from 'react'\r\nimport TestComponent01 from './test/test-01'\r\nimport TestComponent02 from './test/test-02'\r\nimport TestComponent03 from './test/test-03'\r\nimport './style.css'\r\n\r\nconst App = () => {\r\n  return(\r\n    <div className=\"containerFlex\">\r\n      <TestComponent01/>\r\n      <TestComponent02/>\r\n      <TestComponent03/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}