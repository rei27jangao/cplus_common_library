{"version":3,"sources":["../../src/components/text-field/index.tsx","../../src/components/text-area/index.tsx","../../src/components/select-input/index.tsx","../../src/components/country-code/index.tsx","../../src/components/number-input/index.tsx","test/test-01/index.tsx","test/test-02/index.tsx","test/test-03/index.tsx","App.js","index.js"],"names":["TextField","value","required","minLength","maxLength","className","errors","attrs","useState","error","setError","useEffect","targetValue","setTargetValue","React","style","placeholder","invalid","onBlur","onChange","val","handleChange","color","renderErrorMessage","onClick","console","TextAreaInput","name","type","chars","ascii","i","l","c","String","toASCII","SelectInput","options","CountryInput","isRequired","textVal","setTextVal","e","onKeyDown","event","NumberInput","isDecimal","errMessage","setErrMessage","removeExtraDot","min","max","convert","TestComponent01","empty","marginTop","width","TestComponent02","textAlign","fontWeight","texts","title","dogOptions","id","label","TestComponent03","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e68a563.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Input } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as types from './types'\n\nexport const renderErrorMessage = (error: string) => {\n  if (error !== '')\n    return (\n      <p\n        style={{\n          color: 'red'\n        }}\n      >\n        {error}\n      </p>\n    )\n  return ''\n}\n\nexport const TextField: React.FC<types.InputType> = ({\n  value,\n  required,\n  minLength,\n  maxLength,\n  className,\n  errors,\n  attrs\n}) => {\n  const [error, setError] = useState('')\n  useEffect(() => {}, [error])\n  const [targetValue, setTargetValue] = useState(value)\n\n  const handleChange = (val: any) => {\n    val.preventDefault()\n    setTargetValue(val.target.value)\n  }\n\n  const handleBlur = () => {\n    if (required === true) {\n      if (targetValue === '') {\n        setError(errors?.empty || 'Please fill out this field')\n        setTargetValue(value)\n      } else {\n        if (minLength !== undefined && minLength > targetValue.length) {\n          setError(`Must be minimum of ${minLength} characters only`)\n        } else if (maxLength !== undefined && maxLength < targetValue.length) {\n          setError(`Must be maximum of ${maxLength} characters only`)\n        } else {\n          setError('')\n        }\n      }\n    } else {\n      setError('')\n    }\n    setTargetValue(\n      targetValue\n        .replace(/(^\\s*)|(\\s*$)/gi, '') // removes leading and trailing spaces\n        .replace(/[ ]{2,}/gi, ' ') // replaces multiple spaces with one space\n        .replace(/\\n +/, '\\n') // Removes spaces after newlines\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <Input\n        value={targetValue}\n        required={required}\n        style={attrs?.style}\n        className={className}\n        placeholder={attrs?.placeholder}\n        invalid={error !== ''}\n        onBlur={handleBlur}\n        onChange={(val: any) => handleChange(val)}\n      />\n      {renderErrorMessage(error)}\n      <button\n        onClick={() => {\n          console.log(targetValue)\n        }}\n      >\n        Check\n      </button>\n    </React.Fragment>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Input, Label } from 'reactstrap'\n\nexport type TextAreaInputProps = {\n  name?: any\n  value?: any\n  required?: boolean\n  minLength?: number | 0\n  maxLength?: number | 2000\n  className: string\n  errors?: {\n    empty?: string\n    invalid?: string\n  }\n  attrs?: {\n    placeholder?: string\n    style?: any\n  }\n}\n\nexport const renderErrorMessage = (error: string) => {\n  if (error !== '')\n    return (\n      <p\n        style={{\n          color: 'red'\n        }}\n      >\n        {error}\n      </p>\n    )\n  return ''\n}\n\nexport const TextAreaInput: React.FC<TextAreaInputProps> = ({\n  name,\n  value,\n  required,\n  minLength,\n  maxLength,\n  className,\n  errors,\n  attrs\n}) => {\n  const [error, setError] = useState('')\n  useEffect(() => {}, [error])\n  const [targetValue, setTargetValue] = useState(value)\n\n  const handleChange = (val: any) => {\n    setTargetValue(val.target.value)\n  }\n\n  const handleBlur = () => {\n    if (required === true) {\n      if (targetValue === '') {\n        setError(errors?.empty || 'Please fill out this field')\n        setTargetValue(value)\n      } else {\n        if (minLength !== undefined && minLength > targetValue.length) {\n          setError(`Must be minimum of ${minLength} characters only`)\n        } else if (maxLength !== undefined && maxLength < targetValue.length) {\n          setError(`Must be maximum of ${maxLength} characters only`)\n        } else {\n          setError('')\n        }\n      }\n    } else {\n      setError('')\n    }\n    // function to convert full-width to half-width\n    const toASCII = (chars: any) => {\n      var ascii = ''\n      for (var i = 0, l = chars.length; i < l; i++) {\n        var c = chars[i].charCodeAt(0)\n\n        // make sure we only convert half-full width char\n        if (c >= 0xff00 && c <= 0xffef) {\n          c = 0xff & (c + 0x20)\n        }\n\n        ascii += String.fromCharCode(c)\n      }\n\n      return ascii\n    }\n    setTargetValue(\n      toASCII(\n        targetValue\n          .replace(/(^\\s*)|(\\s*$)/gi, '') // removes leading and trailing spaces\n          .replace(/[ ]{2,}/gi, ' ') // replaces multiple spaces with one space\n          .replace(/\\n +/, '\\n') // Removes spaces after newlines\n      )\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <Label>\n        {name} &nbsp; {targetValue.length}/{maxLength}\n      </Label>\n      <Input\n        type='textarea'\n        value={targetValue}\n        required={required}\n        style={attrs?.style}\n        className={className}\n        placeholder={attrs?.placeholder}\n        invalid={error !== ''}\n        onBlur={handleBlur}\n        onChange={(val: any) => handleChange(val)}\n        // onKeyDown={handleKeyDown}\n      />\n      {renderErrorMessage(error)}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\n\nimport Select from 'react-select'\n\nexport type SelectInputProps = {\n  required?: boolean\n  options?: []\n}\n\nexport const SelectInput: React.FC<SelectInputProps> = ({\n  required,\n  options\n}) => {\n  return (\n    <React.Fragment>\n      <Select required={required} options={options} />\n    </React.Fragment>\n  )\n}\n","import React, {useState} from 'react'\r\nimport * as types from './types'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Label, Input } from 'reactstrap';\r\n\r\nexport const CountryInput: React.FC<types.InputType> = ({isRequired, attrs}) => {\r\n \r\nconst [textVal, setTextVal] = useState('');\r\n\r\n  // const [errMessage, setErrMessage] = useState('')\r\n\r\n  const onChange = (value:any) => {\r\n    setTextVal(value.toUpperCase());\r\n  }\r\n\r\n  const validation = (event:any) => {\r\n    if (event.keyCode < 48 || event.keyCode > 57 ) {\r\n      if (event.keyCode !== 8) {\r\n        event.preventDefault();\t\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Label>{attrs.title} <span className=\"text-danger\">*</span></Label>\r\n      <Input \r\n        type=\"text\"\r\n        value={textVal}\r\n        required={isRequired}\r\n        name={attrs.name}\r\n        placeholder={attrs.placeholder}\r\n        style={attrs.style}\r\n        minLength={2}\r\n        maxLength={3}\r\n        onChange={(e:any) => onChange(e.target.value)}\r\n        onKeyDown={validation}\r\n      />\r\n      <p className=\"text-muted\">ex: JP or JPN or 392</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\r\nimport * as types from './types'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Label, Input } from 'reactstrap';\r\n\r\nexport const NumberInput: React.FC<types.InputType> = ({isRequired, isDecimal , attrs}) => {\r\n \r\nconst [textVal, setTextVal] = useState('');\r\n\r\n  const [errMessage, setErrMessage] = useState('')\r\n\r\n  console.log(setErrMessage)\r\n  const onChange = (value:any) => {\r\n    const convert = removeExtraDot(value)\r\n    setTextVal(convert.toUpperCase());\r\n  }\r\n\r\n  const removeExtraDot = (value:string) => {\r\n    return value.replace(/\\s{2,}/g, '.');\r\n  }\r\n\r\n  const validation = (event:any) => {\r\n    if(isDecimal) {\r\n      if (event.keyCode < 48 || event.keyCode > 57 ) {\r\n        if (event.keyCode !== 8 && event.keyCode !== 110 && event.keyCode !== 190 ) {\r\n          event.preventDefault();\t\r\n        }\r\n      }\r\n    } else {\r\n      if (event.keyCode < 48 || event.keyCode > 57 ) {\r\n        if (event.keyCode !== 8) {\r\n          event.preventDefault();\t\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Label>{attrs.title} <span className=\"text-danger\">*</span></Label>\r\n      <Input \r\n        type=\"text\"\r\n        value={textVal}\r\n        required={isRequired}\r\n        name={attrs.name}\r\n        placeholder={attrs.placeholder}\r\n        style={attrs.style}\r\n        minLength={attrs.min}\r\n        maxLength={attrs.max}\r\n        onChange={(e:any) => onChange(e.target.value)}\r\n        onKeyDown={validation}\r\n        invalid={errMessage !== ''}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { TextField } from 'cplus_common_library'\r\n\r\nconst TestComponent01: React.FC = () => {\r\n  let SampleValue = 'Sample'\r\n  return (\r\n    <div>\r\n      <TextField\r\n        value={SampleValue}\r\n        required={true}\r\n        errors={{\r\n          empty: 'Please fill out this field',\r\n          invalid: 'Invlaid'\r\n        }}\r\n        className='nothing'\r\n        attrs={{\r\n          placeholder: 'Enter your project name',\r\n          style: {\r\n            marginTop: '10px',\r\n            width: '300px'\r\n          }\r\n        }}\r\n      />\r\n      {SampleValue}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent01\r\n","import React from 'react'\r\nimport { CountryInput, NumberInput } from 'cplus_common_library'\r\n\r\nconst TestComponent02: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1\r\n        style={{\r\n          textAlign: 'center',\r\n          fontWeight: 'bold'\r\n        }}\r\n      >\r\n        Testing Components2\r\n      </h1>\r\n      <CountryInput\r\n        isRequired={true}\r\n        // value=\"JP\"\r\n        texts={{\r\n          empty: 'Please fill the required field',\r\n          invalid: 'Invalid country code format.'\r\n        }}\r\n        attrs={{\r\n          name: 'inputForm',\r\n          title: 'Input Title',\r\n          placeholder: 'Enter a Country code',\r\n          style: { width: '10%' }\r\n        }}\r\n      />\r\n      <NumberInput\r\n        isRequired={true}\r\n        isDecimal={true}\r\n        texts={{\r\n          empty: 'Please fill the required field',\r\n          invalid: 'Format incorrect'\r\n        }}\r\n        attrs={{\r\n          name: 'number01',\r\n          title: 'Input Number',\r\n          placeholder: 'Enter a text',\r\n          min: 1,\r\n          max: 10,\r\n          style: { width: '10%' }\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent02\r\n","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { TextAreaInput, SelectInput } from 'cplus_common_library'\r\n\r\nexport const dogOptions = [\r\n  { id: 1, label: \"Chihuahua\" },\r\n  { id: 2, label: \"Bulldog\" },\r\n  { id: 3, label: \"Dachshund\" },\r\n  { id: 4, label: \"Akita\" }\r\n];\r\n\r\nconst TestComponent03: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1\r\n        style={{\r\n          textAlign: 'center',\r\n          fontWeight: 'bold'\r\n        }}\r\n      >\r\n        Testing Components 3\r\n      </h1>\r\n      <TextAreaInput \r\n        value=''\r\n        name='Description'\r\n        required={true}\r\n        maxLength={20}\r\n        errors={{\r\n          empty: 'Please fill out this field',\r\n          invalid: 'Format incorrect'\r\n        }}\r\n        className='nothing'\r\n        attrs={{\r\n          placeholder: 'Enter description'\r\n        }}\r\n      />\r\n      <SelectInput options={dogOptions} />\r\n    </div>\r\n  )\r\n}\r\n  \r\nexport default TestComponent03\r\n","import React from 'react'\r\nimport TestComponent01 from './test/test-01'\r\nimport TestComponent02 from './test/test-02'\r\nimport TestComponent03 from './test/test-03'\r\nimport './style.css'\r\n\r\nconst App = () => {\r\n  return(\r\n    <div className=\"containerFlex\">\r\n      <TestComponent01/>\r\n      <TestComponent02/>\r\n      <TestComponent03/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}