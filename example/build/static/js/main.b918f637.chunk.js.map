{"version":3,"sources":["test/test-03/index.tsx","test/styles.ts","../../src/components/common/error-message/index.tsx","../../src/components/text-field/index.tsx","../../src/components/text-area/index.tsx","../../src/components/postal-input/index.tsx","../../src/components/select-input/index.tsx","../../src/components/common/required-indication/index.tsx","../../src/components/country-code/index.tsx","../../src/components/number-input/index.tsx","../../src/components/email-input/index.tsx","../../src/components/date-time-range/time-picker.tsx","../../src/components/date-time-range/time-range-picker.tsx","../../src/components/date-time-range/date-picker.tsx","../../src/components/date-time-range/date-range-picker.tsx","../../src/components/date-time-range/date-time-picker.tsx","../../src/components/date-time-range/date-time-range-picker.tsx","../../src/components/date-time-range/index.tsx","../../src/components/dialog-box/index.tsx","test/test-01/index.tsx","test/test-02/index.tsx","App.js","index.js"],"names":["label","containerStyles","width","padding","inputStyles","marginBottom","ErrorMessage","error","style","paddingLeft","color","fontSize","TextField","value","valid","invalid","required","minLength","maxLength","errors","attrs","innerRef","onChange","useState","setError","targetValue","setTargetValue","toBeValidate","setToBeValidate","handleChange","e","setNoWhiteSpace","validateLength","fixToBeValidate","React","type","className","placeholder","onBlur","fixTargetValue","removeSpaces","TextAreaInput","useEffect","name","chars","ascii","i","l","c","String","toASCII","val","renderErrorMessage","PostalInput","regexPH","console","SelectInput","isRequired","options","isMulti","onCreateOption","selectedOptions","setSelectedOptions","useCallback","selected","JSON","RequiredSign","CountryInput","texts","textVal","setTextVal","errMessage","setErrMessage","checkLength","checkFormat","check","NumberInput","isDecimal","checkValue","num","pos","twoDecimal","num1","parseInt","EmailInput","validateEmail","fixedEmail","expression","TimePicker","timeFormat","onSelect","customInput","inputType","startTime","setStartTime","validateTime","handleRawChange","checkTime","checkChar","handleBlur","DisabledInput","onClick","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","dateFormat","customInputRef","onChangeRaw","date","placeholderText","isClearable","TimeRangePicker","endTime","setEndTime","DatePicker","startDate","setStartDate","DateRangePicker","Date","endDate","setEndDate","selectsStart","selectsEnd","minDate","DateTimePicker","DateTimeRangePickerDefault","DateTimeRangePicker","Dialog","headerText","bodyText","okText","cancelText","callback","toggleDialog","isOpen","toggle","icon","fa","size","TestComponent01","textFieldRef","useRef","emailInputRef","timerPickerRef","log","title","placeHolder","margin","TestComponent02","textInput","modal","setModal","empty","min","max","alert","optionFlavours","toLowerCase","replace","TestComponent03","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b918f637.chunk.js","sourcesContent":["import React from 'react'\r\nimport { containerStyles } from '../styles'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nimport { TextAreaInput, PostalInput, SelectInput } from 'cplus_common_library'\r\n\r\n\r\nexport const createOption = (label: any) => ({\r\n  label,\r\n  value: label.toLowerCase().replace(/\\W/g, '')\r\n})\r\n\r\nexport const optionFlavours = [\r\n  createOption('Chocolate')\r\n];\r\n\r\n\r\nconst TestComponent03: React.FC = () => {\r\n  // const textAreaRef= useRef(null)\r\n\r\n  // const handleCreate = (inputValue: any) => {\r\n  //   const { options } = this.state;\r\n  //   const newOption = createOption(inputValue);\r\n  //   console.log(newOption);\r\n  //   console.groupEnd();\r\n  //   this.setState({\r\n  //     options: [...options, newOption],\r\n  //     value: newOption\r\n  //   });\r\n  // };\r\n\r\n  return (\r\n    <div style={containerStyles}>\r\n      <TextAreaInput\r\n        value=''\r\n        required={true}\r\n        maxLength={20}\r\n        errors={{\r\n          empty: 'Please fill out this field',\r\n          invalid: 'Format incorrect'\r\n        }}\r\n        attrs={{\r\n          name: 'inputForm',\r\n          title: 'Country Code',\r\n          placeholder: 'Enter a Country code',\r\n          style: { width: '50%' }\r\n        }}\r\n        // innerRef={textAreaRef}\r\n      />\r\n      <PostalInput\r\n        value=''\r\n        name='Postal Code:'\r\n        required={true}\r\n        errors={{\r\n          empty: 'Please fill out this field',\r\n          invalid: 'Format incorrect'\r\n        }}\r\n        attrs={{\r\n          placeholder: 'Enter description'\r\n        }}\r\n        // innerRef={textAreaRef}\r\n      />\r\n      <SelectInput\r\n        options={optionFlavours}\r\n        // isMulti\r\n        isRequired={true}\r\n        errors={{\r\n          empty: 'Please fill out this field',\r\n          invalid: 'Format incorrect'\r\n        }} \r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent03\r\n","export const containerStyles = {\r\n  width: '90%',\r\n  padding: '5px'\r\n}\r\n\r\nexport const inputStyles = {\r\n  marginBottom: '20px',\r\n  padding: '5px'\r\n}\r\n","import React from 'react'\r\nimport * as types from './types'\r\n\r\nexport const ErrorMessage: React.FC<types.ErrorType> = ({ error }) => {\r\n  const errorStyles = {\r\n    marginBottom: '5px',\r\n    paddingLeft: '5px',\r\n    color: '#dc3545',\r\n    fontSize: '12px'\r\n  }\r\n\r\n  return <p style={errorStyles}>{error}</p>\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Input, Label } from 'reactstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport * as types from './types'\r\nimport { ErrorMessage } from '../common/error-message'\r\n\r\nexport const TextField: React.FC<types.InputType> = ({\r\n  value,\r\n  valid,\r\n  invalid,\r\n  required,\r\n  minLength,\r\n  maxLength,\r\n  errors,\r\n  attrs,\r\n  innerRef,\r\n  onChange\r\n}) => {\r\n  const [error, setError] = useState('')\r\n  const [targetValue, setTargetValue] = useState(value)\r\n  const [toBeValidate, setToBeValidate] = useState(targetValue)\r\n\r\n  const handleChange = (e: any) => {\r\n    e.preventDefault()\r\n    const setNoWhiteSpace = e.target.value\r\n    setToBeValidate(setNoWhiteSpace.replace(/(^\\s*)/gi, ''))\r\n    onChange(e)\r\n  }\r\n\r\n  const validateLength = () => {\r\n    const fixToBeValidate = toBeValidate\r\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n      .replace(/[ ]{2,}/gi, ' ')\r\n      .replace(/\\n +/, '\\n')\r\n\r\n    if (minLength !== undefined && minLength > fixToBeValidate.length) {\r\n      setError(`Must be minimum of ${minLength} characters only`)\r\n    } else if (maxLength !== undefined && maxLength < fixToBeValidate.length) {\r\n      setError(`Must be maximum of ${maxLength} characters only`)\r\n    } else {\r\n      setError('')\r\n    }\r\n  }\r\n\r\n  const validateRequired = () => {\r\n    if (required === true) {\r\n      if (toBeValidate === '') {\r\n        setError(errors?.empty || `Please enter ${attrs?.title}`)\r\n        setTargetValue('')\r\n      } else {\r\n        validateLength()\r\n      }\r\n    } else {\r\n      validateLength()\r\n    }\r\n  }\r\n\r\n  const removeSpaces = () => {\r\n    const fixTargetValue = value\r\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n      .replace(/[ ]{2,}/gi, ' ')\r\n      .replace(/\\n +/, '\\n')\r\n    const fixToBeValidate = toBeValidate\r\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n      .replace(/[ ]{2,}/gi, ' ')\r\n      .replace(/\\n +/, '\\n')\r\n    setToBeValidate(fixToBeValidate)\r\n    setTargetValue(fixTargetValue)\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    validateRequired()\r\n    if (error !== '') {\r\n      removeSpaces()\r\n      setTargetValue(value)\r\n    } else {\r\n      setToBeValidate(\r\n        toBeValidate\r\n          .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n          .replace(/[ ]{2,}/gi, ' ')\r\n          .replace(/\\n +/, '\\n')\r\n      )\r\n      setTargetValue(\r\n        toBeValidate\r\n          .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n          .replace(/[ ]{2,}/gi, ' ')\r\n          .replace(/\\n +/, '\\n')\r\n      )\r\n    }\r\n  }\r\n\r\n  const renderTextCounter = () => (\r\n    <React.Fragment>\r\n      {toBeValidate.length}/{maxLength || 100}\r\n    </React.Fragment>\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {required && <span>*</span>}\r\n      <Label>\r\n        {attrs?.title}: {renderTextCounter()}\r\n      </Label>\r\n      <Input\r\n        type='text'\r\n        value={toBeValidate}\r\n        required={required}\r\n        style={attrs?.style}\r\n        className={attrs?.className}\r\n        placeholder={attrs?.placeHolder || `Enter ${attrs?.title || ''}`}\r\n        invalid={invalid || error !== ''}\r\n        onBlur={handleBlur}\r\n        onChange={(val: any) => handleChange(val)}\r\n        minLength={minLength || 0}\r\n        maxLength={100}\r\n        innerRef={innerRef}\r\n        valid={valid}\r\n      />\r\n      <ErrorMessage error={error} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport { Input, Label } from 'reactstrap'\n\nexport type TextAreaInputProps = {\n  name?: any\n  value?: any\n  required?: boolean\n  minLength?: number | 0\n  maxLength?: number | 2000\n  className?: string\n  errors?: {\n    empty?: string\n    invalid?: string\n  }\n  attrs?: {\n    name?: string\n    title?: string\n    placeholder?: string\n    style?: React.CSSProperties\n  }\n}\n\nexport const renderErrorMessage = (error: string) => {\n  if (error !== '')\n    return (\n      <p\n        style={{\n          color: 'red'\n        }}\n      >\n        {error}\n      </p>\n    )\n  return ''\n}\n\nexport const TextAreaInput: React.FC<TextAreaInputProps> = ({\n  // name,\n  value,\n  required,\n  minLength,\n  maxLength,\n  className,\n  errors,\n  attrs\n}) => {\n  const [error, setError] = useState('')\n  useEffect(() => {}, [error])\n  const [targetValue, setTargetValue] = useState(value)\n\n  const handleChange = (val: any) => {\n    setTargetValue(val.target.value)\n  }\n\n  const handleBlur = () => {\n    if (required === true) {\n      if (targetValue === '') {\n        setError(errors?.empty || 'Please fill out this field')\n        setTargetValue(value)\n      } else {\n        if (minLength !== undefined && minLength > targetValue.length) {\n          setError(`Must be minimum of ${minLength} characters only`)\n        } else if (maxLength !== undefined && maxLength < targetValue.length) {\n          setError(`Must be maximum of ${maxLength} characters only`)\n        } else {\n          setError('')\n        }\n      }\n    } else {\n      setError('')\n    }\n    // function to convert full-width to half-width\n    const toASCII = (chars: any) => {\n      var ascii = ''\n      for (var i = 0, l = chars.length; i < l; i++) {\n        var c = chars[i].charCodeAt(0)\n\n        // make sure we only convert half-full width char\n        if (c >= 0xff00 && c <= 0xffef) {\n          c = 0xff & (c + 0x20)\n        }\n\n        ascii += String.fromCharCode(c)\n      }\n\n      return ascii\n    }\n    setTargetValue(\n      toASCII(\n        targetValue\n          .replace(/(^\\s*)|(\\s*$)/gi, '') // removes leading and trailing spaces\n          .replace(/[ ]{2,}/gi, ' ') // replaces multiple spaces with one space\n          .replace(/\\n +/, '\\n') // Removes spaces after newlines\n      )\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <Label>\n        {attrs?.title} &nbsp; {targetValue.length}/{maxLength}\n      </Label>\n      <Input\n        type='textarea'\n        value={targetValue}\n        required={required}\n        name={attrs?.name}\n        placeholder={attrs?.placeholder}\n        style={attrs?.style}\n        className={className}\n        invalid={error !== ''}\n        onBlur={handleBlur}\n        onChange={(val: any) => handleChange(val)}\n        // onKeyDown={handleKeyDown}\n      />\n      {renderErrorMessage(error)}\n    </React.Fragment>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Input, Label } from 'reactstrap'\n\nexport type PostalInputProps = {\n  name?: any\n  value?: any\n  required?: boolean\n  minLength?: number\n  maxLength?: number\n  className?: string\n  errors?: {\n    empty?: string\n    invalid?: string\n  }\n  attrs?: {\n    name: string\n    title: string\n    placeholder: string\n    style: React.CSSProperties\n  }\n}\n\nexport const renderErrorMessage = (error: string) => {\n  if (error !== '')\n    return (\n      <p\n        style={{\n          color: 'red'\n        }}\n      >\n        {error}\n      </p>\n    )\n  return ''\n}\n\nexport const PostalInput: React.FC<PostalInputProps> = ({\n  name,\n  value,\n  required,\n  className,\n  // errors,\n  attrs,\n  minLength = 3,\n  maxLength = 10\n}) => {\n  const [error, setError] = useState('')\n  useEffect(() => {}, [error])\n  const [targetValue, setTargetValue] = useState(value)\n\n  const handleChange = (val: any) => {\n    setTargetValue(val.target.value)\n  }\n\n  const handleBlur = () => {\n    const regexPH = /\\d{4}/\n\n    if (required === true) {\n      if (regexPH.test(targetValue) === false) {\n        setError(`Invalid postal code.`)\n        console.log('true')\n      } else {\n        setError('')\n      }\n      // if (targetValue === '') {\n      //   setError(errors?.empty || 'Please fill out this field')\n      //   setTargetValue(value)\n      // } else {\n      //   if (minLength !== undefined && minLength > targetValue.length) {\n      //     setError(`Must be minimum of ${minLength} characters only`)\n      //   } else if (maxLength !== undefined && maxLength > targetValue.length) {\n      //     setError(`Must be maximum of ${maxLength} characters only`)\n      //   } else {\n      //     setError('')\n      //   }\n      // }\n    } else {\n      setError('')\n    }\n    // function to convert full-width to half-width\n    const toASCII = (chars: any) => {\n      var ascii = ''\n      for (var i = 0, l = chars.length; i < l; i++) {\n        var c = chars[i].charCodeAt(0)\n\n        // make sure we only convert half-full width char\n        if (c >= 0xff00 && c <= 0xffef) {\n          c = 0xff & (c + 0x20)\n        }\n\n        ascii += String.fromCharCode(c)\n      }\n\n      return ascii\n    }\n    setTargetValue(\n      toASCII(\n        targetValue\n          .replace(/(^\\s*)|(\\s*$)/gi, '') // removes leading and trailing spaces\n          .replace(/[ ]{2,}/gi, ' ') // replaces multiple spaces with one space\n          .replace(/\\n +/, '\\n') // Removes spaces after newlines\n      )\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <Label>{name}</Label>\n      <Input\n        value={targetValue}\n        required={required}\n        style={attrs?.style}\n        className={className}\n        placeholder={attrs?.placeholder}\n        invalid={error !== ''}\n        onBlur={handleBlur}\n        onChange={(val: any) => handleChange(val)}\n        minLength={minLength}\n        maxLength={maxLength}\n        // onKeyDown={handleKeyDown}\n      />\n      {renderErrorMessage(error)}\n    </React.Fragment>\n  )\n}\n","import React, { useState, useEffect, useCallback } from 'react'\n\nimport CreatableSelect from 'react-select'\n\nexport type SelectInputProps = {\n  isRequired?: boolean\n  isMulti?: boolean\n  onCreateOption?: any\n  options: any\n  value?: any\n  errors?: {\n    empty?: string\n    invalid?: string\n  }\n}\n\nexport const renderErrorMessage = (error: string) => {\n  if (error !== '')\n    return (\n      <p\n        style={{\n          color: 'red'\n        }}\n      >\n        {error}\n      </p>\n    )\n  return ''\n}\n\nexport const SelectInput: React.FC<SelectInputProps> = ({\n  isRequired,\n  options,\n  value,\n  errors,\n  isMulti,\n  onCreateOption\n}) => {\n  const [selectedOptions, setSelectedOptions] = useState(value)\n  const [error, setError] = useState('')\n  useEffect(() => {}, [error])\n\n  const handleChange = useCallback((selected: any) => {\n    setSelectedOptions(selected.value)\n  }, [])\n\n  const handleBlur = () => {\n    if (isRequired === true) {\n      if (selectedOptions === 'default') {\n        console.log('true')\n        setError(errors?.empty || 'Please fill out this field')\n        setSelectedOptions(value)\n      } else {\n        console.log('false')\n      }\n    } else {\n      setError('')\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <CreatableSelect\n        isMulti={isMulti}\n        isRequired={isRequired}\n        options={options}\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        invalid={error !== ''}\n        onCreateOption={onCreateOption}\n      />\n      {renderErrorMessage(error)}\n      {selectedOptions}\n      {JSON.stringify(options)}\n    </React.Fragment>\n  )\n}\n","import React from 'react'\r\n\r\nexport const RequiredSign: React.FC<{}> = () => {\r\n  return <span className='text-danger'>*</span>;\r\n}\r\n","import React, { useState } from 'react'\r\nimport * as types from './types'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Label, Input } from 'reactstrap'\r\nimport { RequiredSign } from '../common/required-indication'\r\n\r\nexport const CountryInput: React.FC<types.InputType> = ({\r\n  isRequired,\r\n  attrs,\r\n  texts,\r\n  value,\r\n  innerRef,\r\n  className\r\n}) => {\r\n  const [textVal, setTextVal] = useState(value)\r\n\r\n  const [errMessage, setErrMessage] = useState('')\r\n\r\n  const onChange = (value: any) => {\r\n    const check = value.replace(/[^a-zA-Z0-9０-９Ａ-ｚ]/g, '')\r\n    checkLength(check)\r\n    checkFormat(check)\r\n    setTextVal(check.toUpperCase())\r\n  }\r\n\r\n  const checkLength = (val: any) => {\r\n    if (val.length == 1) {\r\n      setErrMessage(texts.invalid)\r\n    } else if (val.length === 0) {\r\n      setErrMessage(texts.empty)\r\n    } else {\r\n      setErrMessage('')\r\n    }\r\n  }\r\n\r\n  const checkFormat = (val: any) => {\r\n    const numberExp = /^[0-9]*$/\r\n    const numberFullExp = /^[０-９]*$/\r\n    const alphaExp = /^[A-Za-z]+$/\r\n    const alphaFullExp = /^[Ａ-ｚ]+$/\r\n    if (\r\n      !(\r\n        val.match(numberExp) ||\r\n        val.match(alphaExp) ||\r\n        val.match(numberFullExp) ||\r\n        val.match(alphaFullExp)\r\n      )\r\n    ) {\r\n      setErrMessage('Invalid country code format.')\r\n    }\r\n  }\r\n\r\n  const toASCII = (chars: any) => {\r\n    var ascii = ''\r\n    for (var i = 0, l = chars.length; i < l; i++) {\r\n      var c = chars[i].charCodeAt(0)\r\n      if (c >= 0xff00 && c <= 0xffef) {\r\n        c = 0xff & (c + 0x20)\r\n      }\r\n      ascii += String.fromCharCode(c)\r\n    }\r\n    setTextVal(ascii)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Label>\r\n        {attrs.title} { isRequired && <RequiredSign />}\r\n      </Label>\r\n      <Input\r\n        type='text'\r\n        value={textVal}\r\n        required={isRequired}\r\n        name={attrs.name}\r\n        placeholder={attrs.placeholder}\r\n        style={attrs.style}\r\n        minLength={2}\r\n        maxLength={3}\r\n        onChange={(e: any) => onChange(e.target.value)}\r\n        onBlur={() => toASCII(textVal)}\r\n        invalid={errMessage !== ''}\r\n        innerRef={innerRef}\r\n        className={className}\r\n      />\r\n      <p className='text-danger'>{errMessage}</p>\r\n      <p className='text-muted'>ex: JP or JPN or 392</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport * as types from './types'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Label, Input } from 'reactstrap'\r\nimport { RequiredSign } from '../common/required-indication'\r\n\r\nexport const NumberInput: React.FC<types.InputType> = ({\r\n  isRequired,\r\n  isDecimal,\r\n  attrs,\r\n  texts\r\n}) => {\r\n  const [textVal, setTextVal] = useState('')\r\n  const [errMessage, setErrMessage] = useState('')\r\n\r\n  const onChange = (value: any) => {\r\n    const num = value.target.value;\r\n    if (isDecimal) {\r\n      const check = num.replace(/[^0-9０-９\\..]/g, '');\r\n      if (num.charAt(0) === '.') {\r\n        setTextVal(num.slice(1))\r\n      } else {\r\n        setTextVal(check)\r\n      }\r\n      const pos = num.indexOf('.') + 1\r\n      if (pos > 1) {\r\n        const twoDecimal = num.indexOf('.') + 3\r\n        const num1 = num.substr(0, pos) + num.slice(pos).replace('.', '')\r\n        setTextVal(num1.substr(0, twoDecimal));\r\n        checkValue(num1.substr(0, twoDecimal));\r\n      }\r\n    } else {\r\n      const check = num.replace(/[^0-9０-９]/g, '')\r\n      checkValue(check)\r\n      setTextVal(check)\r\n    }\r\n  }\r\n\r\n  const checkValue = (num: any) => {\r\n    if (num.length !== 0) {\r\n      setErrMessage('')\r\n      if (num > attrs.max || num < attrs.min) {\r\n        setErrMessage(texts.invalid);\r\n      } else {\r\n        setErrMessage('');\r\n      }\r\n    } else {\r\n      setErrMessage(texts.empty)\r\n    }\r\n  }\r\n\r\n  const toASCII = (chars: any) => {\r\n    var ascii = ''\r\n    for (var i = 0, l = chars.length; i < l; i++) {\r\n      var c = chars[i].charCodeAt(0)\r\n      if (c >= 0xff00 && c <= 0xffef) {\r\n        c = 0xff & (c + 0x20)\r\n      }\r\n      ascii += String.fromCharCode(c)\r\n    }\r\n    const num = parseInt(ascii);\r\n    if (num > attrs.max || num < attrs.min) {\r\n      setTextVal('')\r\n      setErrMessage(texts.invalid);\r\n    } else {\r\n      setTextVal(ascii);\r\n      setErrMessage('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Label>\r\n        {attrs.title} { isRequired && <RequiredSign />}\r\n      </Label>\r\n      <Input\r\n        type='text'\r\n        value={textVal}\r\n        required={isRequired}\r\n        name={attrs.name}\r\n        placeholder={attrs.placeholder}\r\n        style={attrs.style}\r\n        onChange={(value: any) => onChange(value)}\r\n        onBlur={() => toASCII(textVal)}\r\n        invalid={errMessage !== ''}\r\n      />\r\n      <p className='text-danger'>{errMessage}</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","/* eslint-disable no-useless-escape */\r\nimport React, { useState } from 'react'\r\nimport { Input, Label } from 'reactstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport * as types from './types'\r\nimport { ErrorMessage } from '../common/error-message'\r\n\r\nexport const EmailInput: React.FC<types.EmailType> = ({\r\n  value,\r\n  valid,\r\n  invalid,\r\n  required,\r\n  minLength,\r\n  maxLength,\r\n  attrs,\r\n  errors,\r\n  innerRef,\r\n  onChange\r\n}) => {\r\n  const [error, setError] = useState('')\r\n  const [targetValue, setTargetValue] = useState(value)\r\n  const [toBeValidate, setToBeValidate] = useState(targetValue)\r\n\r\n  const renderTextCounter = () => (\r\n    <React.Fragment>\r\n      {toBeValidate.length}/{maxLength || 320}\r\n    </React.Fragment>\r\n  )\r\n\r\n  const validateLength = () => {\r\n    const fixToBeValidate = toBeValidate\r\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n      .replace(/[ ]{2,}/gi, ' ')\r\n      .replace(/\\n +/, '\\n')\r\n\r\n    if (minLength !== undefined && minLength > fixToBeValidate.length) {\r\n      setError(`Must be minimum of ${minLength} characters only`)\r\n    } else if (maxLength !== undefined && maxLength < fixToBeValidate.length) {\r\n      setError(`Must be maximum of ${maxLength} characters only`)\r\n    } else {\r\n      validateEmail()\r\n    }\r\n  }\r\n\r\n  const validateRequired = () => {\r\n    if (required === true) {\r\n      if (toBeValidate === '') {\r\n        setError(errors?.empty || `Please enter ${attrs?.title}`)\r\n        setTargetValue('')\r\n      } else {\r\n        validateLength()\r\n      }\r\n    } else {\r\n      validateLength()\r\n    }\r\n  }\r\n\r\n  const validateEmail = () => {\r\n    const fixedEmail = toASCII(\r\n      toBeValidate\r\n        .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n        .replace(/[ ]{2,}/gi, ' ')\r\n        .replace(/\\n +/, '\\n')\r\n    )\r\n    // eslint-disable-next-line no-control-regex\r\n    const expression = /(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0]+)*|\"((([ \\t]*\\r\\n)?[ \\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0]))*(([ \\t]*\\r\\n)?[ \\t]+)?\")@(([a-z\\d\\u00A0]|[a-z\\d\\u00A0][a-z\\d\\-._~\\u00A0]*[a-z\\d\\u00A0])\\.)+([a-z\\u00A0]|[a-z\\u00A0][a-z\\d\\-._~\\u00A0]*[a-z\\u00A0])\\.?$/i\r\n    const isValid = expression.test(String(fixedEmail).toLowerCase())\r\n    if (!isValid) {\r\n      setError(`${errors?.invalid || 'Invalid format'}`)\r\n      setTargetValue(value)\r\n    } else {\r\n      setError('')\r\n    }\r\n  }\r\n\r\n  const toASCII = (chars: any) => {\r\n    var ascii = ''\r\n    for (var i = 0, l = chars.length; i < l; i++) {\r\n      var c = chars[i].charCodeAt(0)\r\n      if (c >= 0xff00 && c <= 0xffef) {\r\n        c = 0xff & (c + 0x20)\r\n      }\r\n      ascii += String.fromCharCode(c)\r\n    }\r\n    return ascii\r\n  }\r\n\r\n  const removeSpaces = () => {\r\n    const fixTargetValue = value\r\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n      .replace(/[ ]{2,}/gi, ' ')\r\n      .replace(/\\n +/, '\\n')\r\n    const fixToBeValidate = toBeValidate\r\n      .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n      .replace(/[ ]{2,}/gi, ' ')\r\n      .replace(/\\n +/, '\\n')\r\n    setToBeValidate(fixToBeValidate)\r\n    setTargetValue(fixTargetValue)\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    validateRequired()\r\n    if (error !== '') {\r\n      removeSpaces()\r\n      setTargetValue(\r\n        toASCII(\r\n          value\r\n            .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n            .replace(/[ ]{2,}/gi, ' ')\r\n            .replace(/\\n +/, '\\n')\r\n        )\r\n      )\r\n      setToBeValidate(\r\n        toASCII(\r\n          toBeValidate\r\n            .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n            .replace(/[ ]{2,}/gi, ' ')\r\n            .replace(/\\n +/, '\\n')\r\n        )\r\n      )\r\n    } else {\r\n      setToBeValidate(\r\n        toASCII(\r\n          toBeValidate\r\n            .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n            .replace(/[ ]{2,}/gi, ' ')\r\n            .replace(/\\n +/, '\\n')\r\n        )\r\n      )\r\n      setTargetValue(\r\n        toASCII(\r\n          targetValue\r\n            .replace(/(^\\s*)|(\\s*$)/gi, '')\r\n            .replace(/[ ]{2,}/gi, ' ')\r\n            .replace(/\\n +/, '\\n')\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  const handleChange = (e: any) => {\r\n    e.preventDefault()\r\n    const setNoWhiteSpace = e.target.value\r\n    setToBeValidate(setNoWhiteSpace.replace(/(^\\s*)/gi, ''))\r\n    onChange(e)\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {required && <span>*</span>}\r\n      <Label>\r\n        {attrs?.title}: {renderTextCounter()}\r\n      </Label>\r\n      <Input\r\n        type='text'\r\n        value={toBeValidate}\r\n        required={required}\r\n        style={attrs?.style}\r\n        className={attrs?.className}\r\n        placeholder={attrs?.placeHolder || `Enter ${attrs?.title || ''}`}\r\n        invalid={invalid || error !== ''}\r\n        onBlur={handleBlur}\r\n        onChange={(val: any) => handleChange(val)}\r\n        minLength={minLength || 5}\r\n        maxLength={320}\r\n        innerRef={innerRef}\r\n        valid={valid}\r\n      />\r\n      <ErrorMessage error={error} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport { Label } from 'reactstrap'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { ErrorMessage } from '../common/error-message'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport * as types from './types'\r\n\r\nexport const TimePicker: React.FC<types.TimePickerProps> = ({\r\n  required,\r\n  attrs,\r\n  timeFormat,\r\n  value,\r\n  innerRef,\r\n  onChange,\r\n  onSelect,\r\n  customInput,\r\n  errors,\r\n  inputType\r\n}) => {\r\n  const [startTime, setStartTime] = useState(value)\r\n  const [error, setError] = useState('')\r\n\r\n  const validateTime = () => {\r\n    if (startTime === null) {\r\n      setError(errors?.invalid || `Invalid Format`)\r\n      setStartTime(startTime)\r\n    } else {\r\n      setError('')\r\n    }\r\n  }\r\n\r\n  const handleRawChange = (e: any) => {\r\n    const checkChar = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/\r\n    const checkTime = checkChar.test(e)\r\n    if (timeFormat === 'hh:mm') {\r\n      if (e.length > 5) {\r\n        setError(`Must be maximum of 5 characters`)\r\n        setStartTime(null)\r\n      } else if (e.length < 0) {\r\n        setError(`Must be minimum of 0 characters`)\r\n        setStartTime(null)\r\n      } else if (!checkTime) {\r\n        setError(errors?.invalid || `Invalid Format`)\r\n      } else {\r\n        setError('')\r\n      }\r\n    } else {\r\n      if (e.length > 8) {\r\n        setError(`Must be maximum of 8 characters`)\r\n        setStartTime(null)\r\n      } else if (e.length < 0) {\r\n        setError(`Must be minimum of 0 characters`)\r\n        setStartTime(null)\r\n      } else if (!checkTime) {\r\n        setError(errors?.invalid || `Invalid Format`)\r\n      } else {\r\n        setError('')\r\n      }\r\n    }\r\n  }\r\n\r\n  const validateRequired = () => {\r\n    if (required === true) {\r\n      if (startTime === '') {\r\n        setError(errors?.empty || `Please enter a valid ${attrs?.title}`)\r\n      } else {\r\n        validateTime()\r\n      }\r\n    } else {\r\n      validateTime()\r\n    }\r\n  }\r\n\r\n  const handleChange = (val: any) => {\r\n    setStartTime(val)\r\n    onChange(val)\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    validateRequired()\r\n  }\r\n\r\n  const DisabledInput = ({ value, onClick, onSelect }: any) => (\r\n    <input\r\n      onClick={onClick}\r\n      value={value}\r\n      onChange={() => {}}\r\n      onBlur={handleBlur}\r\n      onSelect={onSelect || handleBlur}\r\n      placeholder={attrs?.placeholder}\r\n      className={\r\n        error !== ''\r\n          ? `border border-danger form-control ${attrs?.className}`\r\n          : `${attrs?.className} form-control`\r\n      }\r\n    />\r\n  )\r\n\r\n  if (inputType === 'input')\r\n    return (\r\n      <React.Fragment>\r\n        {required && <span>*</span>}\r\n        <Label>{attrs?.title}</Label>\r\n        <br />\r\n        {timeFormat === 'hh:mm' ? (\r\n          <DatePicker\r\n            selected={startTime}\r\n            showTimeSelect\r\n            showTimeSelectOnly\r\n            timeIntervals={1}\r\n            timeCaption='Time'\r\n            dateFormat='HH:mm'\r\n            className={\r\n              error !== ''\r\n                ? `border border-danger ${attrs?.className}`\r\n                : attrs?.className\r\n            }\r\n            onBlur={handleBlur}\r\n            customInput={customInput}\r\n            customInputRef={innerRef}\r\n            onSelect={onSelect}\r\n            onChange={(date: any) => handleChange(date)}\r\n            onChangeRaw={(date: any) => handleRawChange(date.target.value)}\r\n            placeholderText={\r\n              attrs?.placeholder || `Enter ${attrs?.title || 'Time'}`\r\n            }\r\n            required={required}\r\n          />\r\n        ) : (\r\n          <DatePicker\r\n            selected={startTime}\r\n            showTimeSelect\r\n            showTimeSelectOnly\r\n            timeIntervals={1}\r\n            timeCaption='Time'\r\n            dateFormat='HH:mm:ss'\r\n            className={\r\n              error !== ''\r\n                ? `border border-danger ${attrs?.className}`\r\n                : attrs?.className\r\n            }\r\n            customInput={customInput}\r\n            customInputRef={innerRef}\r\n            onBlur={handleBlur}\r\n            onSelect={onSelect}\r\n            onChange={(date: any) => handleChange(date)}\r\n            onChangeRaw={(date: any) => handleRawChange(date.target.value)}\r\n            placeholderText={\r\n              attrs?.placeholder || `Enter ${attrs?.title || 'Time'}`\r\n            }\r\n            required={required}\r\n          />\r\n        )}\r\n        <p\r\n          style={{\r\n            marginBottom: '1px',\r\n            fontSize: '11px'\r\n          }}\r\n        >\r\n          {timeFormat === 'hh:mm' ? 'Format: HH:MM' : 'Format: HH:MM:SS'}\r\n        </p>\r\n        <ErrorMessage error={error} />\r\n      </React.Fragment>\r\n    )\r\n  else {\r\n    return (\r\n      <React.Fragment>\r\n        {required && <span>*</span>}\r\n        <Label>{attrs?.title}</Label>\r\n        <br />\r\n        {timeFormat === 'hh:mm' ? (\r\n          <DatePicker\r\n            selected={startTime}\r\n            showTimeSelect\r\n            showTimeSelectOnly\r\n            timeIntervals={1}\r\n            timeCaption='Time'\r\n            dateFormat='HH:mm'\r\n            className={\r\n              error !== ''\r\n                ? `border border-danger ${attrs?.className}`\r\n                : attrs?.className\r\n            }\r\n            onBlur={handleBlur}\r\n            customInput={<DisabledInput />}\r\n            customInputRef={innerRef}\r\n            onSelect={onSelect}\r\n            onChange={(date: any) => handleChange(date)}\r\n            onChangeRaw={(date: any) => handleRawChange(date.target.value)}\r\n            placeholderText={\r\n              attrs?.placeholder || `Enter ${attrs?.title || 'Time'}`\r\n            }\r\n            isClearable\r\n            required={required}\r\n          />\r\n        ) : (\r\n          <DatePicker\r\n            selected={startTime}\r\n            showTimeSelect\r\n            showTimeSelectOnly\r\n            timeIntervals={1}\r\n            timeCaption='Time'\r\n            dateFormat='HH:mm:ss'\r\n            className={\r\n              error !== ''\r\n                ? `border border-danger ${attrs?.className}`\r\n                : attrs?.className\r\n            }\r\n            customInput={<DisabledInput />}\r\n            customInputRef={innerRef}\r\n            onBlur={handleBlur}\r\n            onSelect={onSelect}\r\n            onChange={(date: any) => handleChange(date)}\r\n            onChangeRaw={(date: any) => handleRawChange(date.target.value)}\r\n            placeholderText={\r\n              attrs?.placeholder || `Enter ${attrs?.title || 'Time'}`\r\n            }\r\n            isClearable\r\n            required={required}\r\n          />\r\n        )}\r\n        <p\r\n          style={{\r\n            marginBottom: '1px',\r\n            fontSize: '11px'\r\n          }}\r\n        >\r\n          {timeFormat === 'hh:mm' ? 'Format: HH:MM' : 'Format: HH:MM:SS'}\r\n        </p>\r\n        <ErrorMessage error={error} />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nexport const TimeRangePicker: React.FC = () => {\r\n  const [startTime, setStartTime] = useState(new Date())\r\n  const [endTime, setEndTime] = useState(new Date())\r\n  return (\r\n    <React.Fragment>\r\n      <DatePicker\r\n        selected={startTime}\r\n        onChange={(date: any) => setStartTime(date)}\r\n        showTimeSelect\r\n        showTimeSelectOnly\r\n        timeIntervals={1}\r\n        timeCaption='Time'\r\n        dateFormat='HH:mm'\r\n      />\r\n      <br />\r\n      <DatePicker\r\n        selected={endTime}\r\n        onChange={(date: any) => setEndTime(date)}\r\n        showTimeSelect\r\n        showTimeSelectOnly\r\n        timeIntervals={1}\r\n        timeCaption='Time'\r\n        dateFormat='HH:mm'\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport ReactDatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nexport const DatePicker: React.FC = () => {\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  return (\r\n    <ReactDatePicker\r\n      selected={startDate}\r\n      onChange={(date: any) => setStartDate(date)}\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nexport const DateRangePicker: React.FC = () => {\r\n  const [startDate, setStartDate] = useState(new Date('2014/02/08'))\r\n  const [endDate, setEndDate] = useState(new Date('2014/02/10'))\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <DatePicker\r\n        selected={startDate}\r\n        onChange={(date: any) => setStartDate(date)}\r\n        selectsStart\r\n        startDate={startDate}\r\n        endDate={endDate}\r\n      />\r\n      <br />\r\n      <DatePicker\r\n        selected={endDate}\r\n        onChange={(date: any) => setEndDate(date)}\r\n        selectsEnd\r\n        startDate={startDate}\r\n        endDate={endDate}\r\n        minDate={startDate}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nexport const DateTimePicker: React.FC = () => {\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  return (\r\n    <DatePicker\r\n      selected={startDate}\r\n      onChange={(date: any) => setStartDate(date)}\r\n      showTimeSelect\r\n      timeFormat='HH:mm'\r\n      timeIntervals={15}\r\n      timeCaption='time'\r\n      dateFormat='MMMM d, yyyy h:mm aa'\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nexport const DateTimeRangePickerDefault: React.FC = () => {\r\n  const [startDate, setStartDate] = useState(new Date())\r\n  const [endDate, setEndDate] = useState(new Date())\r\n  return (\r\n    <React.Fragment>\r\n      <DatePicker\r\n        selected={startDate}\r\n        onChange={(date: any) => setStartDate(date)}\r\n        showTimeSelect\r\n        timeFormat='HH:mm'\r\n        timeIntervals={15}\r\n        timeCaption='time'\r\n        dateFormat='MMMM d, yyyy h:mm aa'\r\n      />\r\n      <br />\r\n      <DatePicker\r\n        selected={endDate}\r\n        onChange={(date: any) => setEndDate(date)}\r\n        showTimeSelect\r\n        timeFormat='HH:mm'\r\n        timeIntervals={15}\r\n        timeCaption='time'\r\n        dateFormat='MMMM d, yyyy h:mm aa'\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport * as types from './types'\r\nimport { TimePicker } from './time-picker'\r\nimport { TimeRangePicker } from './time-range-picker'\r\nimport { DatePicker } from './date-picker'\r\nimport { DateRangePicker } from './date-range-picker'\r\nimport { DateTimePicker } from './date-time-picker'\r\nimport { DateTimeRangePickerDefault } from './date-time-range-picker'\r\n\r\nexport const DateTimeRangePicker: React.FC<types.DateTimeRangePickerProps> = ({\r\n  type,\r\n  timeFormat,\r\n  value,\r\n  innerRef,\r\n  attrs,\r\n  errors,\r\n  onChange,\r\n  required,\r\n  customInput,\r\n  inputType,\r\n  onSelect\r\n}) => {\r\n  if (type === 'timepicker')\r\n    return (\r\n      <TimePicker\r\n        inputType={inputType}\r\n        onChange={onChange}\r\n        onSelect={onSelect}\r\n        errors={errors}\r\n        attrs={attrs}\r\n        timeFormat={timeFormat}\r\n        value={value}\r\n        innerRef={innerRef}\r\n        required={required}\r\n        customInput={customInput}\r\n      />\r\n    )\r\n  if (type === 'timerangepicker') return <TimeRangePicker />\r\n  if (type === 'datepicker') return <DatePicker />\r\n  if (type === 'daterangepicker') return <DateRangePicker />\r\n  if (type === 'datetimepicker') return <DateTimePicker />\r\n  return <DateTimeRangePickerDefault />\r\n}\r\n","import React from 'react'\r\nimport * as types from './types'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport * as fa from '@fortawesome/free-solid-svg-icons'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nexport const Dialog: React.FC<types.DialogType> = ({\r\n  type,\r\n  headerText,\r\n  bodyText,\r\n  okText,\r\n  cancelText,\r\n  callback,\r\n  toggleDialog,\r\n  isOpen\r\n}) => {\r\n  \r\n  const afterConfirmation = () => {\r\n    toggleDialog();\r\n    callback();\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Modal isOpen={isOpen} toggle={toggleDialog}>\r\n        <ModalHeader toggle={toggleDialog}>\r\n          {\r\n            type === 'success' ? <FontAwesomeIcon icon={fa.faCheck} color=\"#28C7B1\" size=\"lg\" /> :\r\n            type === 'warning' ? <FontAwesomeIcon icon={fa.faExclamationTriangle} color=\"#FECC68\" size=\"lg\" /> :\r\n            type === 'error' ? <FontAwesomeIcon icon={fa.faExclamationCircle} color=\"#E54E66\" size=\"lg\" /> :\r\n            type === 'confirm' ? <FontAwesomeIcon icon={fa.faTasks} color=\"#6B7376\" size=\"lg\" /> :\r\n            <FontAwesomeIcon icon={fa.faCheck} color=\"#28C7B1\" size=\"lg\" />\r\n          }\r\n        {' '}{headerText}\r\n        </ModalHeader>\r\n        <ModalBody>\r\n         {bodyText}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n        { type === 'warning' || type === 'confirm' && <Button onClick={toggleDialog} color=\"light\">{cancelText}</Button> }\r\n        <Button \r\n          onClick={() => afterConfirmation()} \r\n          color={ type === 'warning' || type === 'confirm' ? \"danger\" : \"light\"}>\r\n          {okText}\r\n        </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useRef } from 'react'\r\nimport { containerStyles, inputStyles } from '../styles'\r\nimport {\r\n  TextField,\r\n  EmailInput,\r\n  DateTimeRangePicker\r\n} from 'cplus_common_library'\r\nconst TestComponent01: React.FC = () => {\r\n  const textFieldRef = useRef<any>(null)\r\n  const emailInputRef = useRef(null)\r\n  const timerPickerRef = useRef(null)\r\n  return (\r\n    <div style={containerStyles}>\r\n      <div style={inputStyles}>\r\n        <TextField\r\n          value=''\r\n          minLength={3}\r\n          maxLength={6}\r\n          required={true}\r\n          innerRef={textFieldRef}\r\n          onChange={() => console.log('TextField Onchange')}\r\n          attrs={{\r\n            title: 'TextField Input',\r\n            placeHolder: 'Enter your project name',\r\n            className: 'nothing',\r\n            style: {\r\n              width: '300px',\r\n              margin: '0'\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={() => console.log(textFieldRef)}>Check Element</button>\r\n      </div>\r\n      <div style={inputStyles}>\r\n        <EmailInput\r\n          value=''\r\n          onChange={() => console.log('Email Input Onchange')}\r\n          attrs={{\r\n            placeHolder: 'Enter your email',\r\n            title: 'Email Input',\r\n            style: {\r\n              width: '300px',\r\n              margin: '0'\r\n            }\r\n          }}\r\n          required\r\n          minLength={4}\r\n          maxLength={64}\r\n          innerRef={emailInputRef}\r\n        />\r\n        <button onClick={() => console.log(emailInputRef)}>\r\n          Check Element\r\n        </button>\r\n      </div>\r\n\r\n      <div style={containerStyles}>\r\n        <DateTimeRangePicker\r\n          value=''\r\n          required={true}\r\n          innerRef={timerPickerRef}\r\n          inputType='input'\r\n          onChange={() => console.log('onChange TimePicker')}\r\n          onSelect={() => console.log('OnSelect TimePicker')}\r\n          type='timepicker'\r\n          timeFormat='hh:mm:ss'\r\n          attrs={{\r\n            title: 'Time In Input',\r\n            placeholder: 'Time-in',\r\n            className: 'form-control'\r\n          }}\r\n        />\r\n        <button onClick={() => console.log(timerPickerRef)}>\r\n          Check Element\r\n        </button>\r\n      </div>\r\n      <div style={containerStyles}>\r\n        <DateTimeRangePicker\r\n          value=''\r\n          required={true}\r\n          innerRef={timerPickerRef}\r\n          inputType='select'\r\n          onChange={() => console.log('onChange TimePicker')}\r\n          onSelect={() => console.log('OnSelect TimePicker')}\r\n          type='timepicker'\r\n          timeFormat='hh:mm:ss'\r\n          attrs={{\r\n            title: 'Time In Select',\r\n            placeholder: 'Time-in',\r\n            className: 'form-control'\r\n          }}\r\n        />\r\n        <button onClick={() => console.log(timerPickerRef)}>\r\n          Check Element\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent01\r\n","import React, { useRef, useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { CountryInput, NumberInput, Dialog } from 'cplus_common_library'\r\nimport { Button } from 'reactstrap';\r\nimport { containerStyles } from '../styles'\r\n\r\nconst TestComponent02: React.FC = () => {\r\n  const textInput = useRef(null);\r\n  const afterConfirmation = () => alert(\"This function will work when user clicks OK in the Dialog\");\r\n  const [modal, setModal] = useState(false);\r\n  return (\r\n    <div style={containerStyles}>\r\n      <CountryInput\r\n        isRequired={true}\r\n        value=''\r\n        texts={{\r\n          empty: 'Please fill the required field',\r\n          invalid: 'Invalid country code format.'\r\n        }}\r\n        attrs={{\r\n          name: 'inputForm',\r\n          title: 'Country Code',\r\n          placeholder: 'Enter a Country code',\r\n          style: { width: '50%' }\r\n        }}\r\n        className='form-control'\r\n        innerRef={textInput}\r\n      />\r\n      <NumberInput\r\n        isRequired={true}\r\n        isDecimal={true}\r\n        texts={{\r\n          empty: 'Please fill the required field',\r\n          invalid: 'Format incorrect'\r\n        }}\r\n        attrs={{\r\n          name: 'number',\r\n          title: 'Input Number',\r\n          placeholder: 'Enter a number',\r\n          min: 5,\r\n          max: 10,\r\n          style: { width: '50%' }\r\n        }}\r\n      />\r\n      <Dialog \r\n        innerRef={textInput}\r\n        type=\"confirm\"\r\n        headerText=\"Confirmation\"\r\n        bodyText=\"Are you sure to proceed?\"\r\n        okText=\"OK\"\r\n        cancelText=\"CANCEL\"\r\n        callback={() => afterConfirmation()}\r\n        isOpen={modal}\r\n        toggleDialog={() => setModal(!modal)}\r\n      />\r\n      <Button onClick={() => setModal(!modal)}>Open Dialog</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TestComponent02\r\n","import React from 'react'\r\nimport TestComponent01 from './test/test-01'\r\nimport TestComponent02 from './test/test-02'\r\nimport TestComponent03 from './test/test-03'\r\nimport './style.css'\r\n\r\nconst App = () => {\r\n  return(\r\n    <div className=\"containerFlex\">\r\n      <TestComponent01/>\r\n      <TestComponent02/>\r\n      <TestComponent03/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}